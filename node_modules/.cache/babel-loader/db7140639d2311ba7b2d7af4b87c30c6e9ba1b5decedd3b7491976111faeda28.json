{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/burger-script-thai/burger-script/src/componentes/ResumoPedido/ResumoPedido.js\",\n  _s = $RefreshSig$();\n// import './ResumoPedido.css';\n// import CardTerminal from '../CardTerminal/CardTerminal';\n// import { useState, useEffect } from 'react';\n// import { adicionarPedido } from '../../API/Pedidos';\n// import Botao from '../Botao/Botao';\n// import obterNomeUsuario from '../../API/Usuarios';\n// import Modal from 'react-modal';\n\n// const ResumoPedido = ({ produtosSelecionados }) => {\n//   const nomeUsuario = obterNomeUsuario();\n//   console.log(nomeUsuario)\n//   const [nomeCliente, setNomeCliente] = useState('');\n//   const [mesa, setMesa] = useState('');\n//   const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n//   const [modalIsOpen, setIsOpen] = useState(false);\n\n//   Modal.setAppElement('#root');\n\n//         useEffect(() => {\n//           if (!modalIsOpen) {\n//             setNomeCliente('');\n//             setMesa('');\n//             setNomeAtendente('');\n//           };\n//         }, [modalIsOpen]);\n\n//   const enviarPedido = async () => {\n//     if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n//       try {\n//         const produtos = produtosSelecionados.map((produto) => ({\n//           id: produto.id,\n//           waiter: produto.userId,\n//           name: produto.name,\n//           quantity: produto.quantity,\n//           total: produto.total,\n//         }));\n\n//         const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n//         console.log('Pedido registrado:', novoPedido);\n\n//         setTimeout(() => {\n//           setNomeCliente('');\n//           setMesa('');\n//           setNomeAtendente('');\n//           window.location.reload();\n//         }, 1000);\n//         setIsOpen(true);\n//       } catch (error) {\n//         console.error('Erro ao registrar pedido:', error);\n//       }\n//     } else {\n//       alert('Preencha todos os campos do pedido antes de enviar.');\n//     }\n//   };\n//   const handleModalClose = () => {\n//     setIsOpen(false);\n//   };\n//   return (\n//     <>\n//       <CardTerminal>\n//         <h2 className=\"titulo-login\">\n//           <span className=\"chaves\">{\"{\"}</span>\n//           Resumo do Pedido\n//           <span className=\"chaves\">{\"}\"}</span>\n//         </h2>\n//         <div className='container-label-input'>\n//           <div className='linha-label-input'>\n//             <label htmlFor='mesa'>\n//               mesa:\n//             </label>\n//             <span className=\"terminal-cursor\"></span>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"mesa\"\n//               value={mesa}\n//               onChange={(e) => setMesa(e.target.value)}\n//             />\n//           </div>\n//           <div className='linha-label-input'>\n//             <label htmlFor='cliente'>\n//               cliente:<span className=\"terminal-cursor\"></span>\n//             </label>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"cliente\"\n//               value={nomeCliente}\n//               onChange={(e) => setNomeCliente(e.target.value)}\n//             />\n//           </div>\n//         </div>\n//         <div className=\"conteudo-tabela-resumo\">\n//           <table className=\"tabela-resumo\">\n//             <thead>\n//               <tr>\n//                 <th>Quantidade</th>\n//                 <th>Descrição</th>\n//                 <th>Valor</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {produtosSelecionados.map((produto) => (\n//                 <tr key={produto.id}>\n//                   <td>{produto.quantity}</td>\n//                   <td>{produto.name}</td>\n//                   <td>R$ {produto.total}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//               <tr>\n//                 <th className=\"th-total\">total</th>\n//                 <th className='th-total'></th>\n//                 <td className=\"th-total\">\n//                   R$\n//                   {produtosSelecionados.reduce((total, produto) => {\n//                     total += produto.quantity * produto.price;\n//                     return total;\n//                   }, 0)}\n//                 </td>\n//               </tr>\n//             </tfoot>\n//           </table>\n//         </div>\n\n//         <Botao onClick={enviarPedido}>Enviar</Botao>\n//       </CardTerminal>\n\n//       <Modal\n//           className=\"modal\"\n//           isOpen={modalIsOpen}\n//           style={{\n//             overlay: {\n//             backgroundColor: \"var(--verde)\",\n//             display: \"flex\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//             textAlign: \"center\",\n//             },\n//           }}\n//         >\n//           <img src='../../imagens/tela.png' className='logo-modal'/>\n//           <h2> Pedido enviado com sucesso! </h2>\n//           <Botao onClick={handleModalClose}>OK</Botao>\n//           </Modal>\n//     </>\n//   );\n// };\n\n// export default ResumoPedido;\n\n// fncionando modal mas sem exibir nome do atendente\n// import './ResumoPedido.css';\n// import CardTerminal from '../CardTerminal/CardTerminal';\n// import { useState, useEffect } from 'react';\n// import { adicionarPedido } from '../../API/Pedidos';\n// import Botao from '../Botao/Botao';\n// import obterNomeUsuario from '../../API/Usuarios';\n// import Modal from 'react-modal';\n\n// const ResumoPedido = ({ produtosSelecionados }) => {\n//   const nomeUsuario = obterNomeUsuario();\n//   console.log(nomeUsuario)\n//   const [nomeCliente, setNomeCliente] = useState('');\n//   const [mesa, setMesa] = useState('');\n//   const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n//   const [modalIsOpen, setIsOpen] = useState(false);\n\n//   Modal.setAppElement('#root');\n\n//   useEffect(() => {\n//     if (!modalIsOpen) {\n//       setNomeCliente('');\n//       setMesa('');\n//       setNomeAtendente('');\n//     };\n//   }, [modalIsOpen]);\n\n//   const enviarPedido = async () => {\n//     if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n//       try {\n//         const produtos = produtosSelecionados.map((produto) => ({\n//           id: produto.id,\n//           waiter: produto.userId,\n//           name: produto.name,\n//           quantity: produto.quantity,\n//           total: produto.total,\n//         }));\n\n//         const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n//         console.log('Pedido registrado:', novoPedido);\n\n//         setIsOpen(true);\n//       } catch (error) {\n//         console.error('Erro ao registrar pedido:', error);\n//       }\n//     } else {\n//       alert('Preencha todos os campos do pedido antes de enviar.');\n//     }\n//   };\n\n//   const handleModalClose = () => {\n//     setIsOpen(false);\n//     setNomeCliente('');\n//     setMesa('');\n//     setNomeAtendente('');\n//     window.location.reload();\n//   };\n\n//   return (\n//     <>\n//       <CardTerminal>\n//         <h2 className=\"titulo-login\">\n//           <span className=\"chaves\">{\"{\"}</span>\n//           Resumo do Pedido\n//           <span className=\"chaves\">{\"}\"}</span>\n//         </h2>\n//         <div className='container-label-input'>\n//           <div className='linha-label-input'>\n//             <label htmlFor='mesa'>\n//               mesa:\n//             </label>\n//             <span className=\"terminal-cursor\"></span>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"mesa\"\n//               value={mesa}\n//               onChange={(e) => setMesa(e.target.value)}\n//             />\n//           </div>\n//           <div className='linha-label-input'>\n//             <label htmlFor='cliente'>\n//               cliente:<span className=\"terminal-cursor\"></span>\n//             </label>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"cliente\"\n//               value={nomeCliente}\n//               onChange={(e) => setNomeCliente(e.target.value)}\n//             />\n//           </div>\n//         </div>\n//         <div className=\"conteudo-tabela-resumo\">\n//           <table className=\"tabela-resumo\">\n//             <thead>\n//               <tr>\n//                 <th>Quantidade</th>\n//                 <th>Descrição</th>\n//                 <th>Valor</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {produtosSelecionados.map((produto) => (\n//                 <tr key={produto.id}>\n//                   <td>{produto.quantity}</td>\n//                   <td>{produto.name}</td>\n//                   <td>R$ {produto.total}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//               <tr>\n//                 <th className=\"th-total\">total</th>\n//                 <th className='th-total'></th>\n//                 <td className=\"th-total\">\n//                   R$\n//                   {produtosSelecionados.reduce((total, produto) => {\n//                     total += produto.quantity * produto.price;\n//                     return total;\n//                   }, 0)}\n//                 </td>\n//               </tr>\n//             </tfoot>\n//           </table>\n//         </div>\n\n//         <Botao onClick={enviarPedido}>Enviar</Botao>\n//       </CardTerminal>\n\n//       <Modal\n//         className=\"modal\"\n//         isOpen={modalIsOpen}\n//         style={{\n//           overlay: {\n//             backgroundColor: \"var(--nude)\",\n//             display: \"flex\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//             textAlign: \"center\",\n//           },\n//         }}\n//       >\n//         <img src='../../imagens/tela.png' className='logo-modal'/>\n//         <h2 className='msg-sucesso-modal'> Pedido enviado com sucesso! </h2>\n//         <Botao onClick={handleModalClose}>OK</Botao>\n//       </Modal>\n//     </>\n//   );\n// };\n\n// export default ResumoPedido;\n\nimport './ResumoPedido.css';\nimport CardTerminal from '../CardTerminal/CardTerminal';\nimport { useState } from 'react';\nimport { adicionarPedido } from '../../API/Pedidos';\nimport Botao from '../Botao/Botao';\nimport obterNomeUsuario from '../../API/Usuarios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ResumoPedido = _ref => {\n  _s();\n  let {\n    produtosSelecionados\n  } = _ref;\n  // const nomeUsuario = obterNomeUsuario();\n  // console.log(nomeUsuario)\n  const [nomeCliente, setNomeCliente] = useState('');\n  const [mesa, setMesa] = useState('');\n  const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n  const enviarPedido = async () => {\n    if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n      try {\n        const produtos = produtosSelecionados.map(produto => ({\n          id: produto.id,\n          waiter: produto.userId,\n          name: produto.name,\n          quantity: produto.quantity,\n          total: produto.total\n        }));\n        const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n        console.log('Pedido registrado:', novoPedido);\n        setTimeout(() => {\n          setNomeCliente('');\n          setMesa('');\n          setNomeAtendente('');\n          window.location.reload();\n        }, 1000);\n        alert('Pedido enviado com sucesso!');\n      } catch (error) {\n        console.error('Erro ao registrar pedido:', error);\n      }\n    } else {\n      alert('Preencha todos os campos do pedido antes de enviar.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CardTerminal, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"titulo-login\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chaves\",\n          children: \"{\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), \"Resumo do Pedido\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chaves\",\n          children: \"}\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-label-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"linha-label-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"mesa\",\n            children: \"mesa:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"terminal-cursor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputResumoPedido\",\n            id: \"mesa\",\n            value: mesa,\n            onChange: e => setMesa(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"linha-label-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"cliente\",\n            children: [\"cliente:\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"terminal-cursor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputResumoPedido\",\n            id: \"cliente\",\n            value: nomeCliente,\n            onChange: e => setNomeCliente(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conteudo-tabela-resumo\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"tabela-resumo\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Quantidade\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Descri\\xE7\\xE3o\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Valor\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: produtosSelecionados.map(produto => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: produto.quantity\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: produto.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"R$ \", produto.total]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 19\n              }, this)]\n            }, produto.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"th-total\",\n                children: \"total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"th-total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"th-total\",\n                children: [\"R$\", produtosSelecionados.reduce((total, produto) => {\n                  total += produto.quantity * produto.price;\n                  return total;\n                }, 0)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Botao, {\n        onClick: enviarPedido,\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ResumoPedido, \"6F2UlmRjrI3j4qK7dCNPrkfcNKA=\");\n_c = ResumoPedido;\nexport default ResumoPedido;\nvar _c;\n$RefreshReg$(_c, \"ResumoPedido\");","map":{"version":3,"names":["CardTerminal","useState","adicionarPedido","Botao","obterNomeUsuario","jsxDEV","_jsxDEV","Fragment","_Fragment","ResumoPedido","_ref","_s","produtosSelecionados","nomeCliente","setNomeCliente","mesa","setMesa","nomeAtendente","setNomeAtendente","enviarPedido","length","produtos","map","produto","id","waiter","userId","name","quantity","total","novoPedido","console","log","setTimeout","window","location","reload","alert","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","value","onChange","e","target","reduce","price","onClick","_c","$RefreshReg$"],"sources":["/Users/user/Desktop/burger-script-thai/burger-script/src/componentes/ResumoPedido/ResumoPedido.js"],"sourcesContent":["// import './ResumoPedido.css';\n// import CardTerminal from '../CardTerminal/CardTerminal';\n// import { useState, useEffect } from 'react';\n// import { adicionarPedido } from '../../API/Pedidos';\n// import Botao from '../Botao/Botao';\n// import obterNomeUsuario from '../../API/Usuarios';\n// import Modal from 'react-modal';\n\n// const ResumoPedido = ({ produtosSelecionados }) => {\n//   const nomeUsuario = obterNomeUsuario();\n//   console.log(nomeUsuario)\n//   const [nomeCliente, setNomeCliente] = useState('');\n//   const [mesa, setMesa] = useState('');\n//   const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n//   const [modalIsOpen, setIsOpen] = useState(false);\n\n//   Modal.setAppElement('#root');\n\n//         useEffect(() => {\n//           if (!modalIsOpen) {\n//             setNomeCliente('');\n//             setMesa('');\n//             setNomeAtendente('');\n//           };\n//         }, [modalIsOpen]);\n\n//   const enviarPedido = async () => {\n//     if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n//       try {\n//         const produtos = produtosSelecionados.map((produto) => ({\n//           id: produto.id,\n//           waiter: produto.userId,\n//           name: produto.name,\n//           quantity: produto.quantity,\n//           total: produto.total,\n//         }));\n\n//         const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n//         console.log('Pedido registrado:', novoPedido);\n\n\n//         setTimeout(() => {\n//           setNomeCliente('');\n//           setMesa('');\n//           setNomeAtendente('');\n//           window.location.reload();\n//         }, 1000);\n//         setIsOpen(true);\n//       } catch (error) {\n//         console.error('Erro ao registrar pedido:', error);\n//       }\n//     } else {\n//       alert('Preencha todos os campos do pedido antes de enviar.');\n//     }\n//   };\n//   const handleModalClose = () => {\n//     setIsOpen(false);\n//   };\n//   return (\n//     <>\n//       <CardTerminal>\n//         <h2 className=\"titulo-login\">\n//           <span className=\"chaves\">{\"{\"}</span>\n//           Resumo do Pedido\n//           <span className=\"chaves\">{\"}\"}</span>\n//         </h2>\n//         <div className='container-label-input'>\n//           <div className='linha-label-input'>\n//             <label htmlFor='mesa'>\n//               mesa:\n//             </label>\n//             <span className=\"terminal-cursor\"></span>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"mesa\"\n//               value={mesa}\n//               onChange={(e) => setMesa(e.target.value)}\n//             />\n//           </div>\n//           <div className='linha-label-input'>\n//             <label htmlFor='cliente'>\n//               cliente:<span className=\"terminal-cursor\"></span>\n//             </label>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"cliente\"\n//               value={nomeCliente}\n//               onChange={(e) => setNomeCliente(e.target.value)}\n//             />\n//           </div>\n//         </div>\n//         <div className=\"conteudo-tabela-resumo\">\n//           <table className=\"tabela-resumo\">\n//             <thead>\n//               <tr>\n//                 <th>Quantidade</th>\n//                 <th>Descrição</th>\n//                 <th>Valor</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {produtosSelecionados.map((produto) => (\n//                 <tr key={produto.id}>\n//                   <td>{produto.quantity}</td>\n//                   <td>{produto.name}</td>\n//                   <td>R$ {produto.total}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//               <tr>\n//                 <th className=\"th-total\">total</th>\n//                 <th className='th-total'></th>\n//                 <td className=\"th-total\">\n//                   R$\n//                   {produtosSelecionados.reduce((total, produto) => {\n//                     total += produto.quantity * produto.price;\n//                     return total;\n//                   }, 0)}\n//                 </td>\n//               </tr>\n//             </tfoot>\n//           </table>\n//         </div>\n\n//         <Botao onClick={enviarPedido}>Enviar</Botao>\n//       </CardTerminal>\n\n//       <Modal\n//           className=\"modal\"\n//           isOpen={modalIsOpen}\n//           style={{\n//             overlay: {\n//             backgroundColor: \"var(--verde)\",\n//             display: \"flex\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//             textAlign: \"center\",\n//             },\n//           }}\n//         >\n//           <img src='../../imagens/tela.png' className='logo-modal'/>\n//           <h2> Pedido enviado com sucesso! </h2>\n//           <Botao onClick={handleModalClose}>OK</Botao>\n//           </Modal>\n//     </>\n//   );\n// };\n\n// export default ResumoPedido;\n\n// fncionando modal mas sem exibir nome do atendente\n// import './ResumoPedido.css';\n// import CardTerminal from '../CardTerminal/CardTerminal';\n// import { useState, useEffect } from 'react';\n// import { adicionarPedido } from '../../API/Pedidos';\n// import Botao from '../Botao/Botao';\n// import obterNomeUsuario from '../../API/Usuarios';\n// import Modal from 'react-modal';\n\n// const ResumoPedido = ({ produtosSelecionados }) => {\n//   const nomeUsuario = obterNomeUsuario();\n//   console.log(nomeUsuario)\n//   const [nomeCliente, setNomeCliente] = useState('');\n//   const [mesa, setMesa] = useState('');\n//   const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n//   const [modalIsOpen, setIsOpen] = useState(false);\n\n//   Modal.setAppElement('#root');\n\n//   useEffect(() => {\n//     if (!modalIsOpen) {\n//       setNomeCliente('');\n//       setMesa('');\n//       setNomeAtendente('');\n//     };\n//   }, [modalIsOpen]);\n\n//   const enviarPedido = async () => {\n//     if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n//       try {\n//         const produtos = produtosSelecionados.map((produto) => ({\n//           id: produto.id,\n//           waiter: produto.userId,\n//           name: produto.name,\n//           quantity: produto.quantity,\n//           total: produto.total,\n//         }));\n\n//         const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n//         console.log('Pedido registrado:', novoPedido);\n\n//         setIsOpen(true);\n//       } catch (error) {\n//         console.error('Erro ao registrar pedido:', error);\n//       }\n//     } else {\n//       alert('Preencha todos os campos do pedido antes de enviar.');\n//     }\n//   };\n\n//   const handleModalClose = () => {\n//     setIsOpen(false);\n//     setNomeCliente('');\n//     setMesa('');\n//     setNomeAtendente('');\n//     window.location.reload();\n//   };\n\n//   return (\n//     <>\n//       <CardTerminal>\n//         <h2 className=\"titulo-login\">\n//           <span className=\"chaves\">{\"{\"}</span>\n//           Resumo do Pedido\n//           <span className=\"chaves\">{\"}\"}</span>\n//         </h2>\n//         <div className='container-label-input'>\n//           <div className='linha-label-input'>\n//             <label htmlFor='mesa'>\n//               mesa:\n//             </label>\n//             <span className=\"terminal-cursor\"></span>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"mesa\"\n//               value={mesa}\n//               onChange={(e) => setMesa(e.target.value)}\n//             />\n//           </div>\n//           <div className='linha-label-input'>\n//             <label htmlFor='cliente'>\n//               cliente:<span className=\"terminal-cursor\"></span>\n//             </label>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"cliente\"\n//               value={nomeCliente}\n//               onChange={(e) => setNomeCliente(e.target.value)}\n//             />\n//           </div>\n//         </div>\n//         <div className=\"conteudo-tabela-resumo\">\n//           <table className=\"tabela-resumo\">\n//             <thead>\n//               <tr>\n//                 <th>Quantidade</th>\n//                 <th>Descrição</th>\n//                 <th>Valor</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {produtosSelecionados.map((produto) => (\n//                 <tr key={produto.id}>\n//                   <td>{produto.quantity}</td>\n//                   <td>{produto.name}</td>\n//                   <td>R$ {produto.total}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//               <tr>\n//                 <th className=\"th-total\">total</th>\n//                 <th className='th-total'></th>\n//                 <td className=\"th-total\">\n//                   R$\n//                   {produtosSelecionados.reduce((total, produto) => {\n//                     total += produto.quantity * produto.price;\n//                     return total;\n//                   }, 0)}\n//                 </td>\n//               </tr>\n//             </tfoot>\n//           </table>\n//         </div>\n\n//         <Botao onClick={enviarPedido}>Enviar</Botao>\n//       </CardTerminal>\n\n//       <Modal\n//         className=\"modal\"\n//         isOpen={modalIsOpen}\n//         style={{\n//           overlay: {\n//             backgroundColor: \"var(--nude)\",\n//             display: \"flex\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//             textAlign: \"center\",\n//           },\n//         }}\n//       >\n//         <img src='../../imagens/tela.png' className='logo-modal'/>\n//         <h2 className='msg-sucesso-modal'> Pedido enviado com sucesso! </h2>\n//         <Botao onClick={handleModalClose}>OK</Botao>\n//       </Modal>\n//     </>\n//   );\n// };\n\n// export default ResumoPedido;\n\n\n\n\nimport './ResumoPedido.css';\nimport CardTerminal from '../CardTerminal/CardTerminal';\nimport { useState } from 'react';\nimport { adicionarPedido } from '../../API/Pedidos';\nimport Botao from '../Botao/Botao';\nimport obterNomeUsuario from '../../API/Usuarios';\n\nconst ResumoPedido = ({ produtosSelecionados }) => {\n  // const nomeUsuario = obterNomeUsuario();\n  // console.log(nomeUsuario)\n  const [nomeCliente, setNomeCliente] = useState('');\n  const [mesa, setMesa] = useState('');\n  const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n \n  const enviarPedido = async () => {\n    if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n      try {\n        const produtos = produtosSelecionados.map((produto) => ({\n          id: produto.id,\n          waiter: produto.userId,\n          name: produto.name,\n          quantity: produto.quantity,\n          total: produto.total,\n        }));\n\n        const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n        console.log('Pedido registrado:', novoPedido);\n\n        setTimeout(() => {\n          setNomeCliente('');\n          setMesa('');\n          setNomeAtendente('');\n          window.location.reload();\n        }, 1000);\n        alert('Pedido enviado com sucesso!');\n      } catch (error) {\n        console.error('Erro ao registrar pedido:', error);\n      }\n    } else {\n      alert('Preencha todos os campos do pedido antes de enviar.');\n    }\n  };\n\n  return (\n    <>\n      <CardTerminal>\n        <h2 className=\"titulo-login\">\n          <span className=\"chaves\">{\"{\"}</span>\n          Resumo do Pedido\n          <span className=\"chaves\">{\"}\"}</span>\n        </h2>\n        <div className='container-label-input'>\n          <div className='linha-label-input'>\n            <label htmlFor='mesa'>\n              mesa:\n            </label>\n            <span className=\"terminal-cursor\"></span>\n            <input\n              className=\"inputResumoPedido\"\n              id=\"mesa\"\n              value={mesa}\n              onChange={(e) => setMesa(e.target.value)}\n            />\n          </div>\n          <div className='linha-label-input'>\n            <label htmlFor='cliente'>\n              cliente:<span className=\"terminal-cursor\"></span>\n            </label>\n            <input\n              className=\"inputResumoPedido\"\n              id=\"cliente\"\n              value={nomeCliente}\n              onChange={(e) => setNomeCliente(e.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"conteudo-tabela-resumo\">\n          <table className=\"tabela-resumo\">\n            <thead>\n              <tr>\n                <th>Quantidade</th>\n                <th>Descrição</th>\n                <th>Valor</th>\n              </tr>\n            </thead>\n            <tbody>\n              {produtosSelecionados.map((produto) => (\n                <tr key={produto.id}>\n                  <td>{produto.quantity}</td>\n                  <td>{produto.name}</td>\n                  <td>R$ {produto.total}</td>\n                </tr>\n              ))}\n            </tbody>\n            <tfoot>\n              <tr>\n                <th className=\"th-total\">total</th>\n                <th className='th-total'></th>\n                <td className=\"th-total\">\n                  R$\n                  {produtosSelecionados.reduce((total, produto) => {\n                    total += produto.quantity * produto.price;\n                    return total;\n                  }, 0)}\n                </td>\n              </tr>\n            </tfoot>\n          </table>\n        </div>\n\n        <Botao onClick={enviarPedido}>Enviar</Botao>\n      </CardTerminal>\n    </>\n  );\n};\n\nexport default ResumoPedido;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}