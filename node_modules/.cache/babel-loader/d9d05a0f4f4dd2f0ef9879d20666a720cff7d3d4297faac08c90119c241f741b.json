{"ast":null,"code":"const API_URL = 'https://burger-queen-api-mock-mluz.vercel.app';\nconst getAuthToken = () => {\n  const token = localStorage.getItem('authToken');\n  return token;\n};\nexport const obterPedidos = async () => {\n  const authToken = getAuthToken();\n  const response = await fetch(`${API_URL}/orders`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authToken}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Erro ao obter pedidos');\n  }\n  return response.json();\n};\nexport const adicionarPedido = async (cliente, mesa, produtos, atendente) => {\n  const authToken = getAuthToken();\n  try {\n    const pedido = {\n      waiter: atendente,\n      client: cliente,\n      table: mesa,\n      products: produtos.map(produto => ({\n        qty: produto.quantity,\n        client: produto.client,\n        product: {\n          id: produto.id,\n          name: produto.name,\n          type: produto.type,\n          price: produto.price,\n          table: produto.table\n        }\n      })),\n      status: 'pendente',\n      dateEntry: new Date().toISOString(),\n      id: Math.floor(Math.random() * 1000)\n    };\n    const response = await fetch(`${API_URL}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify(pedido)\n    });\n    if (!response.ok) {\n      throw new Error('Erro ao adicionar pedido');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const atualizarStatusPedido = async (pedidoId, novoStatus) => {\n  const authToken = getAuthToken();\n  try {\n    const response = await fetch(`${API_URL}/orders/${pedidoId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`\n      },\n      body: JSON.stringify({\n        status: novoStatus\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Erro ao atualizar o status do pedido');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","getAuthToken","token","localStorage","getItem","obterPedidos","authToken","response","fetch","method","headers","ok","Error","json","adicionarPedido","cliente","mesa","produtos","atendente","pedido","waiter","client","table","products","map","produto","qty","quantity","product","id","name","type","price","status","dateEntry","Date","toISOString","Math","floor","random","body","JSON","stringify","data","error","atualizarStatusPedido","pedidoId","novoStatus"],"sources":["/Users/user/Desktop/burger-script-thai/burger-script/src/API/Pedidos.js"],"sourcesContent":["const API_URL = 'https://burger-queen-api-mock-mluz.vercel.app';\n\nconst getAuthToken = () => {\n  const token = localStorage.getItem('authToken');\n  return token;\n};\n\nexport const obterPedidos = async () => {\n  const authToken = getAuthToken();\n  const response = await fetch(`${API_URL}/orders`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authToken}`,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error('Erro ao obter pedidos');\n  }\n\n  return response.json();\n};\n\nexport const adicionarPedido = async (cliente, mesa,produtos, atendente) => {\n  const authToken = getAuthToken();\n  try {\n    const pedido = {\n      waiter: atendente,\n      client: cliente,\n      table: mesa,\n      products: produtos.map((produto) => ({\n        qty: produto.quantity,\n        client: produto.client,\n        product: {\n          id: produto.id,\n          name: produto.name,\n          type: produto.type,\n          price: produto.price,\n          table: produto.table,\n        },\n      })),\n      status: 'pendente',\n      dateEntry: new Date().toISOString(),\n      id: Math.floor(Math.random() * 1000),\n    };\n\n    const response = await fetch(`${API_URL}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`,\n      },\n      body: JSON.stringify(pedido),\n    });\n\n    if (!response.ok) {\n      throw new Error('Erro ao adicionar pedido');\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const atualizarStatusPedido = async (pedidoId, novoStatus) => {\n  const authToken = getAuthToken();\n  try {\n    const response = await fetch(`${API_URL}/orders/${pedidoId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}`,\n      },\n      body: JSON.stringify({\n        status: novoStatus,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Erro ao atualizar o status do pedido');\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}