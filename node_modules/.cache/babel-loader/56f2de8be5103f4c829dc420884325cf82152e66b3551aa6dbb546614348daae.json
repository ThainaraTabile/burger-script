{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/burger-script-thai/burger-script/src/componentes/ResumoPedido/ResumoPedido.js\",\n  _s = $RefreshSig$();\n// import './ResumoPedido.css';\n// import CardTerminal from '../CardTerminal/CardTerminal';\n// import { useState, useEffect } from 'react';\n// import { adicionarPedido } from '../../API/Pedidos';\n// import Botao from '../Botao/Botao';\n// import obterNomeUsuario from '../../API/Usuarios';\n// import Modal from 'react-modal';\n\n// const ResumoPedido = ({ produtosSelecionados }) => {\n//   const nomeUsuario = obterNomeUsuario();\n//   console.log(nomeUsuario)\n//   const [nomeCliente, setNomeCliente] = useState('');\n//   const [mesa, setMesa] = useState('');\n//   const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n//   const [modalIsOpen, setIsOpen] = useState(false);\n\n//   Modal.setAppElement('#root');\n\n//         useEffect(() => {\n//           if (!modalIsOpen) {\n//             setNomeCliente('');\n//             setMesa('');\n//             setNomeAtendente('');\n//           };\n//         }, [modalIsOpen]);\n\n//   const enviarPedido = async () => {\n//     if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n//       try {\n//         const produtos = produtosSelecionados.map((produto) => ({\n//           id: produto.id,\n//           waiter: produto.userId,\n//           name: produto.name,\n//           quantity: produto.quantity,\n//           total: produto.total,\n//         }));\n\n//         const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n//         console.log('Pedido registrado:', novoPedido);\n\n//         setTimeout(() => {\n//           setNomeCliente('');\n//           setMesa('');\n//           setNomeAtendente('');\n//           window.location.reload();\n//         }, 1000);\n//         setIsOpen(true);\n//       } catch (error) {\n//         console.error('Erro ao registrar pedido:', error);\n//       }\n//     } else {\n//       alert('Preencha todos os campos do pedido antes de enviar.');\n//     }\n//   };\n//   const handleModalClose = () => {\n//     setIsOpen(false);\n//   };\n//   return (\n//     <>\n//       <CardTerminal>\n//         <h2 className=\"titulo-login\">\n//           <span className=\"chaves\">{\"{\"}</span>\n//           Resumo do Pedido\n//           <span className=\"chaves\">{\"}\"}</span>\n//         </h2>\n//         <div className='container-label-input'>\n//           <div className='linha-label-input'>\n//             <label htmlFor='mesa'>\n//               mesa:\n//             </label>\n//             <span className=\"terminal-cursor\"></span>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"mesa\"\n//               value={mesa}\n//               onChange={(e) => setMesa(e.target.value)}\n//             />\n//           </div>\n//           <div className='linha-label-input'>\n//             <label htmlFor='cliente'>\n//               cliente:<span className=\"terminal-cursor\"></span>\n//             </label>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"cliente\"\n//               value={nomeCliente}\n//               onChange={(e) => setNomeCliente(e.target.value)}\n//             />\n//           </div>\n//         </div>\n//         <div className=\"conteudo-tabela-resumo\">\n//           <table className=\"tabela-resumo\">\n//             <thead>\n//               <tr>\n//                 <th>Quantidade</th>\n//                 <th>Descrição</th>\n//                 <th>Valor</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {produtosSelecionados.map((produto) => (\n//                 <tr key={produto.id}>\n//                   <td>{produto.quantity}</td>\n//                   <td>{produto.name}</td>\n//                   <td>R$ {produto.total}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//               <tr>\n//                 <th className=\"th-total\">total</th>\n//                 <th className='th-total'></th>\n//                 <td className=\"th-total\">\n//                   R$\n//                   {produtosSelecionados.reduce((total, produto) => {\n//                     total += produto.quantity * produto.price;\n//                     return total;\n//                   }, 0)}\n//                 </td>\n//               </tr>\n//             </tfoot>\n//           </table>\n//         </div>\n\n//         <Botao onClick={enviarPedido}>Enviar</Botao>\n//       </CardTerminal>\n\n//       <Modal\n//           className=\"modal\"\n//           isOpen={modalIsOpen}\n//           style={{\n//             overlay: {\n//             backgroundColor: \"var(--verde)\",\n//             display: \"flex\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//             textAlign: \"center\",\n//             },\n//           }}\n//         >\n//           <img src='../../imagens/tela.png' className='logo-modal'/>\n//           <h2> Pedido enviado com sucesso! </h2>\n//           <Botao onClick={handleModalClose}>OK</Botao>\n//           </Modal>\n//     </>\n//   );\n// };\n\n// export default ResumoPedido;\n\n// fncionando modal mas sem exibir nome do atendente\n// import './ResumoPedido.css';\n// import CardTerminal from '../CardTerminal/CardTerminal';\n// import { useState, useEffect } from 'react';\n// import { adicionarPedido } from '../../API/Pedidos';\n// import Botao from '../Botao/Botao';\n// import obterNomeUsuario from '../../API/Usuarios';\n// import Modal from 'react-modal';\n\n// const ResumoPedido = ({ produtosSelecionados }) => {\n//   const nomeUsuario = obterNomeUsuario();\n//   console.log(nomeUsuario)\n//   const [nomeCliente, setNomeCliente] = useState('');\n//   const [mesa, setMesa] = useState('');\n//   const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n//   const [modalIsOpen, setIsOpen] = useState(false);\n\n//   Modal.setAppElement('#root');\n\n//   useEffect(() => {\n//     if (!modalIsOpen) {\n//       setNomeCliente('');\n//       setMesa('');\n//       setNomeAtendente('');\n//     };\n//   }, [modalIsOpen]);\n\n//   const enviarPedido = async () => {\n//     if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n//       try {\n//         const produtos = produtosSelecionados.map((produto) => ({\n//           id: produto.id,\n//           waiter: produto.userId,\n//           name: produto.name,\n//           quantity: produto.quantity,\n//           total: produto.total,\n//         }));\n\n//         const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n//         console.log('Pedido registrado:', novoPedido);\n\n//         setIsOpen(true);\n//       } catch (error) {\n//         console.error('Erro ao registrar pedido:', error);\n//       }\n//     } else {\n//       alert('Preencha todos os campos do pedido antes de enviar.');\n//     }\n//   };\n\n//   const handleModalClose = () => {\n//     setIsOpen(false);\n//     setNomeCliente('');\n//     setMesa('');\n//     setNomeAtendente('');\n//     window.location.reload();\n//   };\n\n//   return (\n//     <>\n//       <CardTerminal>\n//         <h2 className=\"titulo-login\">\n//           <span className=\"chaves\">{\"{\"}</span>\n//           Resumo do Pedido\n//           <span className=\"chaves\">{\"}\"}</span>\n//         </h2>\n//         <div className='container-label-input'>\n//           <div className='linha-label-input'>\n//             <label htmlFor='mesa'>\n//               mesa:\n//             </label>\n//             <span className=\"terminal-cursor\"></span>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"mesa\"\n//               value={mesa}\n//               onChange={(e) => setMesa(e.target.value)}\n//             />\n//           </div>\n//           <div className='linha-label-input'>\n//             <label htmlFor='cliente'>\n//               cliente:<span className=\"terminal-cursor\"></span>\n//             </label>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"cliente\"\n//               value={nomeCliente}\n//               onChange={(e) => setNomeCliente(e.target.value)}\n//             />\n//           </div>\n//         </div>\n//         <div className=\"conteudo-tabela-resumo\">\n//           <table className=\"tabela-resumo\">\n//             <thead>\n//               <tr>\n//                 <th>Quantidade</th>\n//                 <th>Descrição</th>\n//                 <th>Valor</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {produtosSelecionados.map((produto) => (\n//                 <tr key={produto.id}>\n//                   <td>{produto.quantity}</td>\n//                   <td>{produto.name}</td>\n//                   <td>R$ {produto.total}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//               <tr>\n//                 <th className=\"th-total\">total</th>\n//                 <th className='th-total'></th>\n//                 <td className=\"th-total\">\n//                   R$\n//                   {produtosSelecionados.reduce((total, produto) => {\n//                     total += produto.quantity * produto.price;\n//                     return total;\n//                   }, 0)}\n//                 </td>\n//               </tr>\n//             </tfoot>\n//           </table>\n//         </div>\n\n//         <Botao onClick={enviarPedido}>Enviar</Botao>\n//       </CardTerminal>\n\n//       <Modal\n//         className=\"modal\"\n//         isOpen={modalIsOpen}\n//         style={{\n//           overlay: {\n//             backgroundColor: \"var(--nude)\",\n//             display: \"flex\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//             textAlign: \"center\",\n//           },\n//         }}\n//       >\n//         <img src='../../imagens/tela.png' className='logo-modal'/>\n//         <h2 className='msg-sucesso-modal'> Pedido enviado com sucesso! </h2>\n//         <Botao onClick={handleModalClose}>OK</Botao>\n//       </Modal>\n//     </>\n//   );\n// };\n\n// export default ResumoPedido;\n\nimport './ResumoPedido.css';\nimport CardTerminal from '../CardTerminal/CardTerminal';\nimport { useState, useEffect } from 'react';\nimport { adicionarPedido } from '../../API/Pedidos';\nimport Botao from '../Botao/Botao';\nimport obterNomeUsuario from '../../API/Usuarios';\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ResumoPedido = _ref => {\n  _s();\n  let {\n    produtosSelecionados\n  } = _ref;\n  // const nomeUsuario = obterNomeUsuario();\n  // console.log(nomeUsuario)\n  const [nomeCliente, setNomeCliente] = useState('');\n  const [mesa, setMesa] = useState('');\n  const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n  const [modalIsOpen, setIsOpen] = useState(false);\n  Modal.setAppElement('#root');\n  useEffect(() => {\n    if (!modalIsOpen) {\n      setNomeCliente('');\n      setMesa('');\n      setNomeAtendente('');\n    }\n    ;\n  }, [modalIsOpen]);\n  const enviarPedido = async () => {\n    if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n      try {\n        const produtos = produtosSelecionados.map(produto => ({\n          id: produto.id,\n          waiter: produto.userId,\n          name: produto.name,\n          quantity: produto.quantity,\n          total: produto.total\n        }));\n        const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n        console.log('Pedido registrado:', novoPedido);\n        setTimeout(() => {\n          setNomeCliente('');\n          setMesa('');\n          setNomeAtendente('');\n          window.location.reload();\n        }, 1000);\n        alert('Pedido enviado com sucesso!');\n      } catch (error) {\n        console.error('Erro ao registrar pedido:', error);\n      }\n    } else {\n      alert('Preencha todos os campos do pedido antes de enviar.');\n    }\n  };\n  const handleModalClose = () => {\n    setIsOpen(false);\n    setNomeCliente('');\n    setMesa('');\n    setNomeAtendente('');\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CardTerminal, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"titulo-login\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chaves\",\n          children: \"{\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), \"Resumo do Pedido\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chaves\",\n          children: \"}\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-label-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"linha-label-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"mesa\",\n            children: \"mesa:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"terminal-cursor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputResumoPedido\",\n            id: \"mesa\",\n            value: mesa,\n            onChange: e => setMesa(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"linha-label-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"cliente\",\n            children: [\"cliente:\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"terminal-cursor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputResumoPedido\",\n            id: \"cliente\",\n            value: nomeCliente,\n            onChange: e => setNomeCliente(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conteudo-tabela-resumo\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"tabela-resumo\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Quantidade\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Descri\\xE7\\xE3o\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Valor\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: produtosSelecionados.map(produto => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: produto.quantity\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: produto.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"R$ \", produto.total]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 19\n              }, this)]\n            }, produto.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"th-total\",\n                children: \"total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"th-total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"th-total\",\n                children: [\"R$\", produtosSelecionados.reduce((total, produto) => {\n                  total += produto.quantity * produto.price;\n                  return total;\n                }, 0)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Botao, {\n        onClick: enviarPedido,\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      className: \"modal\",\n      isOpen: modalIsOpen,\n      style: {\n        overlay: {\n          backgroundColor: \"var(--nude)\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          textAlign: \"center\"\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"../../imagens/tela.png\",\n        className: \"logo-modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"msg-sucesso-modal\",\n        children: \" Pedido enviado com sucesso! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Botao, {\n        onClick: handleModalClose,\n        children: \"OK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ResumoPedido, \"TVb+mteZSmtMd2wzo8SxQCEtxdE=\");\n_c = ResumoPedido;\nexport default ResumoPedido;\nvar _c;\n$RefreshReg$(_c, \"ResumoPedido\");","map":{"version":3,"names":["CardTerminal","useState","useEffect","adicionarPedido","Botao","obterNomeUsuario","Modal","jsxDEV","_jsxDEV","Fragment","_Fragment","ResumoPedido","_ref","_s","produtosSelecionados","nomeCliente","setNomeCliente","mesa","setMesa","nomeAtendente","setNomeAtendente","modalIsOpen","setIsOpen","setAppElement","enviarPedido","length","produtos","map","produto","id","waiter","userId","name","quantity","total","novoPedido","console","log","setTimeout","window","location","reload","alert","error","handleModalClose","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","value","onChange","e","target","reduce","price","onClick","isOpen","style","overlay","backgroundColor","display","justifyContent","alignItems","textAlign","src","_c","$RefreshReg$"],"sources":["/Users/user/Desktop/burger-script-thai/burger-script/src/componentes/ResumoPedido/ResumoPedido.js"],"sourcesContent":["// import './ResumoPedido.css';\n// import CardTerminal from '../CardTerminal/CardTerminal';\n// import { useState, useEffect } from 'react';\n// import { adicionarPedido } from '../../API/Pedidos';\n// import Botao from '../Botao/Botao';\n// import obterNomeUsuario from '../../API/Usuarios';\n// import Modal from 'react-modal';\n\n// const ResumoPedido = ({ produtosSelecionados }) => {\n//   const nomeUsuario = obterNomeUsuario();\n//   console.log(nomeUsuario)\n//   const [nomeCliente, setNomeCliente] = useState('');\n//   const [mesa, setMesa] = useState('');\n//   const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n//   const [modalIsOpen, setIsOpen] = useState(false);\n\n//   Modal.setAppElement('#root');\n\n//         useEffect(() => {\n//           if (!modalIsOpen) {\n//             setNomeCliente('');\n//             setMesa('');\n//             setNomeAtendente('');\n//           };\n//         }, [modalIsOpen]);\n\n//   const enviarPedido = async () => {\n//     if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n//       try {\n//         const produtos = produtosSelecionados.map((produto) => ({\n//           id: produto.id,\n//           waiter: produto.userId,\n//           name: produto.name,\n//           quantity: produto.quantity,\n//           total: produto.total,\n//         }));\n\n//         const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n//         console.log('Pedido registrado:', novoPedido);\n\n\n//         setTimeout(() => {\n//           setNomeCliente('');\n//           setMesa('');\n//           setNomeAtendente('');\n//           window.location.reload();\n//         }, 1000);\n//         setIsOpen(true);\n//       } catch (error) {\n//         console.error('Erro ao registrar pedido:', error);\n//       }\n//     } else {\n//       alert('Preencha todos os campos do pedido antes de enviar.');\n//     }\n//   };\n//   const handleModalClose = () => {\n//     setIsOpen(false);\n//   };\n//   return (\n//     <>\n//       <CardTerminal>\n//         <h2 className=\"titulo-login\">\n//           <span className=\"chaves\">{\"{\"}</span>\n//           Resumo do Pedido\n//           <span className=\"chaves\">{\"}\"}</span>\n//         </h2>\n//         <div className='container-label-input'>\n//           <div className='linha-label-input'>\n//             <label htmlFor='mesa'>\n//               mesa:\n//             </label>\n//             <span className=\"terminal-cursor\"></span>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"mesa\"\n//               value={mesa}\n//               onChange={(e) => setMesa(e.target.value)}\n//             />\n//           </div>\n//           <div className='linha-label-input'>\n//             <label htmlFor='cliente'>\n//               cliente:<span className=\"terminal-cursor\"></span>\n//             </label>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"cliente\"\n//               value={nomeCliente}\n//               onChange={(e) => setNomeCliente(e.target.value)}\n//             />\n//           </div>\n//         </div>\n//         <div className=\"conteudo-tabela-resumo\">\n//           <table className=\"tabela-resumo\">\n//             <thead>\n//               <tr>\n//                 <th>Quantidade</th>\n//                 <th>Descrição</th>\n//                 <th>Valor</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {produtosSelecionados.map((produto) => (\n//                 <tr key={produto.id}>\n//                   <td>{produto.quantity}</td>\n//                   <td>{produto.name}</td>\n//                   <td>R$ {produto.total}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//               <tr>\n//                 <th className=\"th-total\">total</th>\n//                 <th className='th-total'></th>\n//                 <td className=\"th-total\">\n//                   R$\n//                   {produtosSelecionados.reduce((total, produto) => {\n//                     total += produto.quantity * produto.price;\n//                     return total;\n//                   }, 0)}\n//                 </td>\n//               </tr>\n//             </tfoot>\n//           </table>\n//         </div>\n\n//         <Botao onClick={enviarPedido}>Enviar</Botao>\n//       </CardTerminal>\n\n//       <Modal\n//           className=\"modal\"\n//           isOpen={modalIsOpen}\n//           style={{\n//             overlay: {\n//             backgroundColor: \"var(--verde)\",\n//             display: \"flex\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//             textAlign: \"center\",\n//             },\n//           }}\n//         >\n//           <img src='../../imagens/tela.png' className='logo-modal'/>\n//           <h2> Pedido enviado com sucesso! </h2>\n//           <Botao onClick={handleModalClose}>OK</Botao>\n//           </Modal>\n//     </>\n//   );\n// };\n\n// export default ResumoPedido;\n\n// fncionando modal mas sem exibir nome do atendente\n// import './ResumoPedido.css';\n// import CardTerminal from '../CardTerminal/CardTerminal';\n// import { useState, useEffect } from 'react';\n// import { adicionarPedido } from '../../API/Pedidos';\n// import Botao from '../Botao/Botao';\n// import obterNomeUsuario from '../../API/Usuarios';\n// import Modal from 'react-modal';\n\n// const ResumoPedido = ({ produtosSelecionados }) => {\n//   const nomeUsuario = obterNomeUsuario();\n//   console.log(nomeUsuario)\n//   const [nomeCliente, setNomeCliente] = useState('');\n//   const [mesa, setMesa] = useState('');\n//   const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n//   const [modalIsOpen, setIsOpen] = useState(false);\n\n//   Modal.setAppElement('#root');\n\n//   useEffect(() => {\n//     if (!modalIsOpen) {\n//       setNomeCliente('');\n//       setMesa('');\n//       setNomeAtendente('');\n//     };\n//   }, [modalIsOpen]);\n\n//   const enviarPedido = async () => {\n//     if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n//       try {\n//         const produtos = produtosSelecionados.map((produto) => ({\n//           id: produto.id,\n//           waiter: produto.userId,\n//           name: produto.name,\n//           quantity: produto.quantity,\n//           total: produto.total,\n//         }));\n\n//         const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n//         console.log('Pedido registrado:', novoPedido);\n\n//         setIsOpen(true);\n//       } catch (error) {\n//         console.error('Erro ao registrar pedido:', error);\n//       }\n//     } else {\n//       alert('Preencha todos os campos do pedido antes de enviar.');\n//     }\n//   };\n\n//   const handleModalClose = () => {\n//     setIsOpen(false);\n//     setNomeCliente('');\n//     setMesa('');\n//     setNomeAtendente('');\n//     window.location.reload();\n//   };\n\n//   return (\n//     <>\n//       <CardTerminal>\n//         <h2 className=\"titulo-login\">\n//           <span className=\"chaves\">{\"{\"}</span>\n//           Resumo do Pedido\n//           <span className=\"chaves\">{\"}\"}</span>\n//         </h2>\n//         <div className='container-label-input'>\n//           <div className='linha-label-input'>\n//             <label htmlFor='mesa'>\n//               mesa:\n//             </label>\n//             <span className=\"terminal-cursor\"></span>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"mesa\"\n//               value={mesa}\n//               onChange={(e) => setMesa(e.target.value)}\n//             />\n//           </div>\n//           <div className='linha-label-input'>\n//             <label htmlFor='cliente'>\n//               cliente:<span className=\"terminal-cursor\"></span>\n//             </label>\n//             <input\n//               className=\"inputResumoPedido\"\n//               id=\"cliente\"\n//               value={nomeCliente}\n//               onChange={(e) => setNomeCliente(e.target.value)}\n//             />\n//           </div>\n//         </div>\n//         <div className=\"conteudo-tabela-resumo\">\n//           <table className=\"tabela-resumo\">\n//             <thead>\n//               <tr>\n//                 <th>Quantidade</th>\n//                 <th>Descrição</th>\n//                 <th>Valor</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {produtosSelecionados.map((produto) => (\n//                 <tr key={produto.id}>\n//                   <td>{produto.quantity}</td>\n//                   <td>{produto.name}</td>\n//                   <td>R$ {produto.total}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//             <tfoot>\n//               <tr>\n//                 <th className=\"th-total\">total</th>\n//                 <th className='th-total'></th>\n//                 <td className=\"th-total\">\n//                   R$\n//                   {produtosSelecionados.reduce((total, produto) => {\n//                     total += produto.quantity * produto.price;\n//                     return total;\n//                   }, 0)}\n//                 </td>\n//               </tr>\n//             </tfoot>\n//           </table>\n//         </div>\n\n//         <Botao onClick={enviarPedido}>Enviar</Botao>\n//       </CardTerminal>\n\n//       <Modal\n//         className=\"modal\"\n//         isOpen={modalIsOpen}\n//         style={{\n//           overlay: {\n//             backgroundColor: \"var(--nude)\",\n//             display: \"flex\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//             textAlign: \"center\",\n//           },\n//         }}\n//       >\n//         <img src='../../imagens/tela.png' className='logo-modal'/>\n//         <h2 className='msg-sucesso-modal'> Pedido enviado com sucesso! </h2>\n//         <Botao onClick={handleModalClose}>OK</Botao>\n//       </Modal>\n//     </>\n//   );\n// };\n\n// export default ResumoPedido;\n\n\n\n\nimport './ResumoPedido.css';\nimport CardTerminal from '../CardTerminal/CardTerminal';\nimport { useState, useEffect } from 'react';\nimport { adicionarPedido } from '../../API/Pedidos';\nimport Botao from '../Botao/Botao';\nimport obterNomeUsuario from '../../API/Usuarios';\nimport Modal from 'react-modal';\n\n\nconst ResumoPedido = ({ produtosSelecionados }) => {\n  // const nomeUsuario = obterNomeUsuario();\n  // console.log(nomeUsuario)\n  const [nomeCliente, setNomeCliente] = useState('');\n  const [mesa, setMesa] = useState('');\n  const [nomeAtendente, setNomeAtendente] = useState(obterNomeUsuario());\n  const [modalIsOpen, setIsOpen] = useState(false);\n\n  Modal.setAppElement('#root');\n    useEffect(() => {\n      if (!modalIsOpen) {\n        setNomeCliente('');\n        setMesa('');\n        setNomeAtendente('');\n      };\n    }, [modalIsOpen]);\n \n  const enviarPedido = async () => {\n    if (nomeCliente && mesa && produtosSelecionados.length > 0) {\n      try {\n        const produtos = produtosSelecionados.map((produto) => ({\n          id: produto.id,\n          waiter: produto.userId,\n          name: produto.name,\n          quantity: produto.quantity,\n          total: produto.total,\n        }));\n\n        const novoPedido = await adicionarPedido(nomeCliente, mesa, produtos, nomeAtendente);\n        console.log('Pedido registrado:', novoPedido);\n\n        setTimeout(() => {\n          setNomeCliente('');\n          setMesa('');\n          setNomeAtendente('');\n          window.location.reload();\n        }, 1000);\n        alert('Pedido enviado com sucesso!');\n      } catch (error) {\n        console.error('Erro ao registrar pedido:', error);\n      }\n    } else {\n      alert('Preencha todos os campos do pedido antes de enviar.');\n    }\n  };\n\n  const handleModalClose = () => {\n        setIsOpen(false);\n        setNomeCliente('');\n        setMesa('');\n        setNomeAtendente('');\n        window.location.reload();\n      };\n  return (\n    <>\n      <CardTerminal>\n        <h2 className=\"titulo-login\">\n          <span className=\"chaves\">{\"{\"}</span>\n          Resumo do Pedido\n          <span className=\"chaves\">{\"}\"}</span>\n        </h2>\n        <div className='container-label-input'>\n          <div className='linha-label-input'>\n            <label htmlFor='mesa'>\n              mesa:\n            </label>\n            <span className=\"terminal-cursor\"></span>\n            <input\n              className=\"inputResumoPedido\"\n              id=\"mesa\"\n              value={mesa}\n              onChange={(e) => setMesa(e.target.value)}\n            />\n          </div>\n          <div className='linha-label-input'>\n            <label htmlFor='cliente'>\n              cliente:<span className=\"terminal-cursor\"></span>\n            </label>\n            <input\n              className=\"inputResumoPedido\"\n              id=\"cliente\"\n              value={nomeCliente}\n              onChange={(e) => setNomeCliente(e.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"conteudo-tabela-resumo\">\n          <table className=\"tabela-resumo\">\n            <thead>\n              <tr>\n                <th>Quantidade</th>\n                <th>Descrição</th>\n                <th>Valor</th>\n              </tr>\n            </thead>\n            <tbody>\n              {produtosSelecionados.map((produto) => (\n                <tr key={produto.id}>\n                  <td>{produto.quantity}</td>\n                  <td>{produto.name}</td>\n                  <td>R$ {produto.total}</td>\n                </tr>\n              ))}\n            </tbody>\n            <tfoot>\n              <tr>\n                <th className=\"th-total\">total</th>\n                <th className='th-total'></th>\n                <td className=\"th-total\">\n                  R$\n                  {produtosSelecionados.reduce((total, produto) => {\n                    total += produto.quantity * produto.price;\n                    return total;\n                  }, 0)}\n                </td>\n              </tr>\n            </tfoot>\n          </table>\n        </div>\n\n        <Botao onClick={enviarPedido}>Enviar</Botao>\n      </CardTerminal>\n\n      <Modal\n        className=\"modal\"\n        isOpen={modalIsOpen}\n        style={{\n          overlay: {\n            backgroundColor: \"var(--nude)\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            textAlign: \"center\",\n          },\n        }}\n      >\n        <img src='../../imagens/tela.png' className='logo-modal'/>\n        <h2 className='msg-sucesso-modal'> Pedido enviado com sucesso! </h2>\n        <Botao onClick={handleModalClose}>OK</Botao>\n      </Modal>\n    </>\n  );\n};\n\nexport default ResumoPedido;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}